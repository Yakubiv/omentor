.container-fluid.c-video-call
  .row
    .col-lg-9
      .card
        .card-header.bline
          %h3.card-title Video Call
          .card-options
            %a.card-options-fullscreen{"data-toggle" => "card-fullscreen", :href => "#"}
              %i.fe.fe-maximize
        .card-body
          #videos
            #subscriber
            #subscriber-screen
            #publisher
            #call-actions
              %a.btn.btn-danger#stop-session{ data: { toggle: 'tooltip' }, href: '', title: t('class_room.video.stop_session') }
                %i.fe.fe-phone-off.font-20
              %a.btn.btn-success#start-screen-sharing{ data: { toggle: 'tooltip' }, href: '', title: t('class_room.video.start_screen_sharing') }
                %i.icon-screen-desktop.font-20
    .col-lg-3
      .card
        .card-header.bline
          %h3.card-title Lesson Tools
          .card-options
            %a.card-options-fullscreen{"data-toggle" => "card-fullscreen", :href => "#"}
              %i.fe.fe-maximize
        .card-header.bline.pb-0.pt-0
          %ul.nav.nav-tabs.b-none
            %li.nav-item
              %a.nav-link.active{ 'data-toggle' => "tab", href: "#chat"} Chat
            %li.nav-item
              %a.nav-link{ 'data-toggle' => "tab", href: "#board"} Board
        .card-body
          .tab-content
            .tab-pane.fade.active.show#chat
              .chat_app
                .chat_windows
                  %ul.mb-0
                    %li.other-message
                      %span.avatar.avatar-blue.mr-3 NG
                      .message
                        %p.bg-light-cyan Hi Aiden, how are you? How is the project coming along?
                        %p.bg-light-cyan Are we meeting today?
                        %span.time 10:15 AM, Today
                    %li.other-message
                      %span.avatar.avatar-blue.mr-3 NG
                      .message
                        %p.bg-light-pink Are we meeting today I have results?
                        %p.bg-light-pink Project has been already finished and to show you.
                        %span.time 10:18 AM, Today
                    %li.my-message
                      .message
                        %p.bg-light-gray Well we have good budget for the project
                        %span.time 10:25 AM, Today
                  .chat-message.clearfix
                    %a{:href => "javascript:void(0);"}
                      %i.icon-camera
                    %a{:href => "javascript:void(0);"}
                      %i.icon-camcorder
                    %a{:href => "javascript:void(0);"}
                      %i.icon-paper-plane
                    .input-group.mb-0
                      %input.form-control{:placeholder => "Enter text here...", :type => "text"}/
            .tab-pane.fade.show#board
              Board
%script{ src: "https://static.opentok.com/v2/js/opentok.min.js" }

:javascript
  $( document ).on('turbolinks:load', function() {
    var apiKey = "#{ENV['TOKBOX_API_KEY']}";
    var sessionId = "#{@class_room.tokbox_session_id}";
    var token = "#{@class_room.tokbox_token}";

    console.log(apiKey)
    // (optional) add server code here
    initializeSession();

    function handleError(error) {
      if (error) {
        alert(error.message);
      }
    }

    function initializeSession() {
      var session = OT.initSession(apiKey, sessionId);

      const startScreenSharingBtn = document.getElementById("start-screen-sharing");

      startScreenSharingBtn.addEventListener('click', (event)=> {
        event.preventDefault();

        OT.checkScreenSharingCapability(function(response) {
          if(!response.supported || response.extensionRegistered === false) {
            // This browser does not support screen sharing.
          } else if (response.extensionInstalled === false) {
            // Prompt to install the extension.
          } else {
            // Screen sharing is available. Publish the screen.
            var publisher = OT.initPublisher('subscriber-screen',
              {videoSource: 'screen'},
              function(error) {
                if (error) {
                  // Look at error.message to see what went wrong.
                } else {
                  session.publish(publisher, function(error) {
                    if (error) {
                      // Look error.message to see what went wrong.
                    }
                  });
                }
              }
            );
          }
        });
      });

      session.on('streamCreated', function(event) {
        var subOptions = {
          insertMode: 'append',
          insertDefaultUI: true,
          width: '100%',
          height: '100%',
          style: {
            buttonDisplayMode: 'on',
            audioBlockedDisplayMode: "on"
            }
        };

        if (event.stream.videoType === 'screen') {
          session.subscribe(event.stream, 'subscriber-screen', subOptions);
          var subscriberEl = document.getElementById("subscriber");
          subscriberEl.classList.add('-small');

        } else {
          session.subscribe(event.stream, 'subscriber', subOptions);
        }
      });

      // Create a publisher
      var publisher = OT.initPublisher('publisher', {
        insertMode: 'append',
        insertDefaultUI: true,
        width: '100%',
        height: '100%',
        style: {buttonDisplayMode: 'on'}
      }, handleError);

      // Connect to the session
      session.connect(token, function(error) {
        // If the connection is successful, publish to the session
        if (error) {
          handleError(error);
        } else {
          session.publish(publisher, handleError);
        }
      });

      publisher.on("streamDestroyed", function (event) {
        if (event.reason === 'mediaStopped') {
          // User clicked stop sharing
        } else if (event.reason === 'forceUnpublished') {
          // A moderator forced the user to stop sharing.
        }
      });

      publisher.on('mediaStopped', function(event) {
        // The user clicked stop.
      });

      session.on("streamPropertyChanged", function (event) {
        var subscribers = session.getSubscribersForStream(event.stream);
        console.log(event.stream.hasAudio)
        for (var i = 0; i < subscribers.length; i++) {
          i.subscribeToAudio(event.stream.hasAudio); // audio off
          i.subscribeToVideo(event.stream.hasVideo);
          // You may want to display some UI text for each
          // subscriber, or make some other UI change,
          // based on event.changedProperty and
          // event.newValue
        }
      });
      const stopSessionBtn = document.getElementById("stop-session");
      stopSessionBtn.addEventListener('click', (event)=> {
        event.preventDefault();
        console.log("stop-session btn clicked");
        session.disconnect();
      });
    }
  });

